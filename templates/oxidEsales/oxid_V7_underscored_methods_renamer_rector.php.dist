<?php

/**
 * Copyright Â© OXID eSales AG. All rights reserved.
 * See LICENSE file for license details.
 */

declare(strict_types=1);

use Rector\Core\Configuration\Option;
use Rector\OxidEsales\Update\MethodCallRenameGenerator;
use Rector\Renaming\Rector\MethodCall\RenameMethodRector;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;
use Symplify\SymfonyPhpConfig\ValueObjectInliner;

/**
 * rector.php for updating renamed deprecated underscored methods' usages
 * (e.g.
 * protected function _executeNewAction($sNewAction) =>
 * protected function executeNewAction($sNewAction)
 * ) in OxidEsales modules.
 */
if (!defined('TEST_LIBRARY_PATH')) {
    define('TEST_LIBRARY_PATH', __DIR__ . '/vendor/oxid-esales/testing-library/library/');
}
if (!defined('TEST_LIBRARY_HELPERS_PATH')) {
    define('TEST_LIBRARY_HELPERS_PATH', TEST_LIBRARY_PATH . 'helpers/');
}

return static function (ContainerConfigurator $containerConfigurator): void {

    $modulePath = __DIR__ . '/vendor/MODULE_VENDOR_PATH/';
    $moduleMetadata = $modulePath . '/metadata.php';
    $inputFile = __DIR__ . '/vendor/rector/rector/templates/oxidEsales/oxid_v7_deprecated_underscored_classes_methods.csv';

    if (!is_file($inputFile)) {
        throw new \Exception("Input file: $inputFile not found!");
    }

    $parameters = $containerConfigurator->parameters();
    $services = $containerConfigurator->services();

    $parameters
        ->set(
            Option::PATHS,
            [
                $modulePath,
            ]
        )
        ->set(
            Option::SKIP,
            [
                $modulePath . '/assets',
                $modulePath . '/migration',
                $modulePath . '/Tests',
                $modulePath . '/translations',
                $modulePath . '/views',
            ]
        );

    /**
     * Associate module's parent class with an alias, e.g.
     * Module\Namespace\Order_parent - alias for Shop\Namespace\Order
     * using $aModule['extend'] array from metadata.php
     */
    include $moduleMetadata;
    foreach ($aModule['extend'] as $shopClass => $moduleClass) {
        if (!class_exists("{$moduleClass}_parent")) {
            class_alias($shopClass, "{$moduleClass}_parent");
        }
    }

    $methodCallRenames = (new MethodCallRenameGenerator())->getMethodCallRenamesForModule($inputFile, $modulePath);

    $services->set(RenameMethodRector::class)
        ->call(
            'configure',
            [[
                RenameMethodRector::METHOD_CALL_RENAMES => ValueObjectInliner::inline($methodCallRenames),
            ]]
        );
};
